package com.chatapp.service;  
  
import com.chatapp.model.ChatMessage;  
import com.chatapp.repository.ChatMessageRepository;  
import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.stereotype.Service;  
import reactor.core.publisher.Flux;  
import reactor.core.publisher.Mono;  
  
@Service  
public class ChatService {  
  
    @Autowired  
    private ChatMessageRepository chatMessageRepository;  
  
    public Mono<ChatMessage> saveMessage(ChatMessage message) {  
        return chatMessageRepository.save(message);  
    }  
  
    public Flux<ChatMessage> getChatHistory() {  
        return chatMessageRepository.findAll();  
    }  
// Retrieve messages by sender  
    public Flux<ChatMessage> getMessagesBySender(String sender) {  
        return chatMessageRepository.findBySender(sender);  
    }  
  
    // Delete a message by its ID  
    public Mono<Void> deleteMessageById(String id) {  
        return chatMessageRepository.deleteById(id);  
    }  
  
    // Update the content of a specific message  
    public Mono<ChatMessage> updateMessageContent(String id, String newContent) {  
        return chatMessageRepository.findById(id)  
                .flatMap(existingMessage -> {  
                    existingMessage.setContent(newContent);  
                    return chatMessageRepository.save(existingMessage);  
                });  
    }  

}  
